name: "Server AWS CodeBuild CI"
on:
  push:
    branches:
      - "release"

jobs:
  test:
    runs-on: codebuild-airq-${{github.run_id}}-${{github.run_attempt}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-southeast-1"

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: server/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('server/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          npm install
          npm install -g node-gyp
          npm install argon2
        working-directory: server

      - name: Download secrets from AWS Secrets Manager
        run: |
          aws secretsmanager list-secrets --query 'SecretList[*].Name' --output text | tr '\t' '\n' | while read secret; do
            aws secretsmanager get-secret-value --secret-id "$secret" --query SecretString --output text | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' >> .env
          done
        working-directory: server

      - name: Test
        run: npm test
        working-directory: server

  build:
    needs: test
    runs-on: codebuild-airq-${{github.run_id}}-${{github.run_attempt}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-southeast-1"

      - name: Download secrets from AWS Secrets Manager
        run: |
          aws secretsmanager list-secrets --query 'SecretList[*].Name' --output text | tr '\t' '\n' | while read secret; do
            aws secretsmanager get-secret-value --secret-id "$secret" --query SecretString --output text | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' >> .env
          done
        working-directory: server

      - name: Build Docker image and upload
        run: |
          npm run docker
          docker save airq-server:latest | gzip > airq-server.tar.gz
          aws s3 cp airq-server.tar.gz s3://uet-airq/airq-server.tar.gz
        working-directory: server
