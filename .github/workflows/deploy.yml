name: 'Server AWS CodeBuild CI'
on:
  push:
    branches:
      - 'release'

jobs:
  build:
    runs-on:
      - codebuild-airq-${{github.run_id}}-${{github.run_attempt}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-southeast-1'
      - name: Prepare
        run: |
          cd server
          git pull
          npm  install
          gcc -v
          npm install -g node-gyp
          npm install argon2
          npm run build
      - name: Create .env file
        run: |
          cd server
          aws secretsmanager list-secrets --query 'SecretList[*].Name' --output text | tr '\t' '\n' | while read secret; do
            aws secretsmanager get-secret-value --secret-id "$secret" --query SecretString --output text >> .env
          done
          npm run docker
      # - name: Start AWS CodeBuild Project
      #   run: |
      #     aws codebuild start-build --project-name airq

      # - name: Wait for CodeBuild to complete
      #   run: |
      #     BUILD_ID=$(aws codebuild list-builds-for-project --project-name airq --sort-order DESCENDING --max-items 1 --query 'ids[0]' --output text)
      #     aws codebuild batch-get-builds --ids $BUILD_ID --query 'builds[0].buildStatus' --output text
      #     while [ "$(aws codebuild batch-get-builds --ids $BUILD_ID --query 'builds[0].buildStatus' --output text)" == "IN_PROGRESS" ]; do
      #       echo "Build in progress..."
      #       sleep 30
      #     done
      #     if [ "$(aws codebuild batch-get-builds --ids $BUILD_ID --query 'builds[0].buildStatus' --output text)" != "SUCCEEDED" ]; then
      #       echo "Build failed"
      #       exit 1
      #     fi

      # - name: Download build artifacts
      #   run: |
      #     aws s3 cp s3://your-codebuild-artifacts-bucket/artifact.zip ./artifact.zip

      # - name: Deploy to S3
      #   run: |
      #     aws s3 sync ./artifact-folder s3://your-deployment-bucket --delete
